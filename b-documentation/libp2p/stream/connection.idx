ConnectionTrackerName	libp2p/stream/connection.html#ConnectionTrackerName	connection: ConnectionTrackerName	
DefaultConnectionTimeout	libp2p/stream/connection.html#DefaultConnectionTimeout	connection: DefaultConnectionTimeout	
TimeoutHandler	libp2p/stream/connection.html#TimeoutHandler	connection: TimeoutHandler	
Connection	libp2p/stream/connection.html#Connection	connection: Connection	
isUpgraded	libp2p/stream/connection.html#isUpgraded,Connection	connection: isUpgraded(s: Connection): bool	
upgrade	libp2p/stream/connection.html#upgrade,Connection,ref.CatchableError	connection: upgrade(s: Connection; failed: ref CatchableError = nil)	
onUpgrade	libp2p/stream/connection.html#onUpgrade,Connection	connection: onUpgrade(s: Connection): Future[void]	
shortLog	libp2p/stream/connection.html#shortLog,Connection	connection: shortLog(conn: Connection): string	
formatItIMPL	libp2p/stream/connection.html#formatItIMPL.t,Connection	connection: formatItIMPL(it: Connection): auto	
initStream	libp2p/stream/connection.html#initStream.e,Connection	connection: initStream(s: Connection)	
closeImpl	libp2p/stream/connection.html#closeImpl.e,Connection	connection: closeImpl(s: Connection): Future[void]	
hash	libp2p/stream/connection.html#hash,Connection	connection: hash(p: Connection): Hash	
new	libp2p/stream/connection.html#new,typeConnection,PeerId,Direction,Duration,TimeoutHandler,MultiAddress	connection: new(C: type Connection; peerId: PeerId; dir: Direction;\n    timeout: Duration = DefaultConnectionTimeout;\n    timeoutHandler: TimeoutHandler = nil;\n    observedAddr: MultiAddress = MultiAddress()): Connection	
