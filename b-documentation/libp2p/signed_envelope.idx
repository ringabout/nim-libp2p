EnvelopeInvalidProtobuf	libp2p/signed_envelope.html#EnvelopeInvalidProtobuf	EnvelopeError.EnvelopeInvalidProtobuf	
EnvelopeFieldMissing	libp2p/signed_envelope.html#EnvelopeFieldMissing	EnvelopeError.EnvelopeFieldMissing	
EnvelopeInvalidSignature	libp2p/signed_envelope.html#EnvelopeInvalidSignature	EnvelopeError.EnvelopeInvalidSignature	
EnvelopeWrongType	libp2p/signed_envelope.html#EnvelopeWrongType	EnvelopeError.EnvelopeWrongType	
EnvelopeError	libp2p/signed_envelope.html#EnvelopeError	signed_envelope: EnvelopeError	
Envelope	libp2p/signed_envelope.html#Envelope	signed_envelope: Envelope	
decode	libp2p/signed_envelope.html#decode,typedesc[Envelope],seq[byte],string	signed_envelope: decode(T: typedesc[Envelope]; buf: seq[byte]; domain: string): Result[Envelope,\n    EnvelopeError]	
init	libp2p/signed_envelope.html#init,typedesc[Envelope],PrivateKey,seq[byte],seq[byte],string	signed_envelope: init(T: typedesc[Envelope]; privateKey: PrivateKey; payloadType: seq[byte];\n     payload: seq[byte]; domain: string): Result[Envelope, CryptoError]	
encode	libp2p/signed_envelope.html#encode,Envelope	signed_envelope: encode(env: Envelope): Result[seq[byte], CryptoError]	
payload	libp2p/signed_envelope.html#payload,Envelope	signed_envelope: payload(env: Envelope): seq[byte]	
getField	libp2p/signed_envelope.html#getField,ProtoBuffer,int,Envelope,string	signed_envelope: getField(pb: ProtoBuffer; field: int; value: var Envelope; domain: string): ProtoResult[\n    bool]	
SignedPayload	libp2p/signed_envelope.html#SignedPayload	signed_envelope: SignedPayload	
init	libp2p/signed_envelope.html#init,typedesc[SignedPayload[T]],PrivateKey,T	signed_envelope: init[T](_: typedesc[SignedPayload[T]]; privateKey: PrivateKey; data: T): Result[\n    SignedPayload[T], CryptoError]	
getField	libp2p/signed_envelope.html#getField,ProtoBuffer,int,SignedPayload[T]	signed_envelope: getField[T](pb: ProtoBuffer; field: int; value: var SignedPayload[T]): ProtoResult[\n    bool]	
decode	libp2p/signed_envelope.html#decode,typedesc[SignedPayload[T]],seq[byte]	signed_envelope: decode[T](_: typedesc[SignedPayload[T]]; buffer: seq[byte]): Result[\n    SignedPayload[T], EnvelopeError]	
encode	libp2p/signed_envelope.html#encode,SignedPayload[T]	signed_envelope: encode[T](msg: SignedPayload[T]): Result[seq[byte], CryptoError]	
