MaxHashSize	libp2p/multihash.html#MaxHashSize	multihash: MaxHashSize	
MHashCoderProc	libp2p/multihash.html#MHashCoderProc	multihash: MHashCoderProc	
MHash	libp2p/multihash.html#MHash	multihash: MHash	
MultiHash	libp2p/multihash.html#MultiHash	multihash: MultiHash	
MhResult	libp2p/multihash.html#MhResult	multihash: MhResult	
digest	libp2p/multihash.html#digest,typedesc[MultiHash],string,openArray[byte]	multihash: digest(mhtype: typedesc[MultiHash]; hashname: string; data: openArray[byte]): MhResult[\n    MultiHash]	
digest	libp2p/multihash.html#digest,typedesc[MultiHash],int,openArray[byte]	multihash: digest(mhtype: typedesc[MultiHash]; hashcode: int; data: openArray[byte]): MhResult[\n    MultiHash]	
init	libp2p/multihash.html#init,typedesc[MultiHash],string,MDigest[T]	multihash: init[T](mhtype: typedesc[MultiHash]; hashname: string; mdigest: MDigest[T]): MhResult[\n    MultiHash]	
init	libp2p/multihash.html#init,typedesc[MultiHash],MultiCodec,MDigest[T]	multihash: init[T](mhtype: typedesc[MultiHash]; hashcode: MultiCodec; mdigest: MDigest[T]): MhResult[\n    MultiHash]	
init	libp2p/multihash.html#init,typedesc[MultiHash],string,openArray[byte]	multihash: init(mhtype: typedesc[MultiHash]; hashname: string; bdigest: openArray[byte]): MhResult[\n    MultiHash]	
init	libp2p/multihash.html#init,typedesc[MultiHash],MultiCodec,openArray[byte]	multihash: init(mhtype: typedesc[MultiHash]; hashcode: MultiCodec; bdigest: openArray[byte]): MhResult[\n    MultiHash]	
decode	libp2p/multihash.html#decode,typedesc[MultiHash],openArray[byte],MultiHash	multihash: decode(mhtype: typedesc[MultiHash]; data: openArray[byte]; mhash: var MultiHash): MhResult[\n    int]	
validate	libp2p/multihash.html#validate,typedesc[MultiHash],openArray[byte]	multihash: validate(mhtype: typedesc[MultiHash]; data: openArray[byte]): bool	
init	libp2p/multihash.html#init,typedesc[MultiHash],openArray[byte]	multihash: init(mhtype: typedesc[MultiHash]; data: openArray[byte]): MhResult[MultiHash]	
init	libp2p/multihash.html#init,typedesc[MultiHash],string	multihash: init(mhtype: typedesc[MultiHash]; data: string): MhResult[MultiHash]	
init58	libp2p/multihash.html#init58,typedesc[MultiHash],string	multihash: init58(mhtype: typedesc[MultiHash]; data: string): MultiHash	
`==`	libp2p/multihash.html#==,MultiHash,MDigest[T]	multihash: `==`[T](mh: MultiHash; mdigest: MDigest[T]): bool	
`==`	libp2p/multihash.html#==,MDigest[T],MultiHash	multihash: `==`[T](mdigest: MDigest[T]; mh: MultiHash): bool	
`==`	libp2p/multihash.html#==,MultiHash,MultiHash	multihash: `==`(a: MultiHash; b: MultiHash): bool	
hex	libp2p/multihash.html#hex,MultiHash	multihash: hex(value: MultiHash): string	
base58	libp2p/multihash.html#base58,MultiHash	multihash: base58(value: MultiHash): string	
`$`	libp2p/multihash.html#$,MultiHash	multihash: `$`(mh: MultiHash): string	
write	libp2p/multihash.html#write,VBuffer,MultiHash	multihash: write(vb: var VBuffer; mh: MultiHash)	
encode	libp2p/multihash.html#encode,typedesc[MultiBase],string,MultiHash	multihash: encode(mbtype: typedesc[MultiBase]; encoding: string; mh: MultiHash): string	
