SkRawPrivateKeySize	libp2p/crypto/secp.html#SkRawPrivateKeySize	secp: SkRawPrivateKeySize	
SkRawSignatureSize	libp2p/crypto/secp.html#SkRawSignatureSize	secp: SkRawSignatureSize	
SkRawPublicKeySize	libp2p/crypto/secp.html#SkRawPublicKeySize	secp: SkRawPublicKeySize	
SkPrivateKey	libp2p/crypto/secp.html#SkPrivateKey	secp: SkPrivateKey	
SkPublicKey	libp2p/crypto/secp.html#SkPublicKey	secp: SkPublicKey	
SkSignature	libp2p/crypto/secp.html#SkSignature	secp: SkSignature	
SkKeyPair	libp2p/crypto/secp.html#SkKeyPair	secp: SkKeyPair	
pubkey	libp2p/crypto/secp.html#pubkey.t,SkKeyPair	secp: pubkey(v: SkKeyPair): SkPublicKey	
seckey	libp2p/crypto/secp.html#seckey.t,SkKeyPair	secp: seckey(v: SkKeyPair): SkPrivateKey	
random	libp2p/crypto/secp.html#random,typedesc[SkPrivateKey],HmacDrbgContext	secp: random(t: typedesc[SkPrivateKey]; rng: var BrHmacDrbgContext): SkPrivateKey	
random	libp2p/crypto/secp.html#random,typedesc[SkKeyPair],HmacDrbgContext	secp: random(t: typedesc[SkKeyPair]; rng: var BrHmacDrbgContext): SkKeyPair	
seckey	libp2p/crypto/secp.html#seckey.t,SkKeyPair_2	secp: seckey(v: SkKeyPair): SkPrivateKey	
pubkey	libp2p/crypto/secp.html#pubkey.t,SkKeyPair_2	secp: pubkey(v: SkKeyPair): SkPublicKey	
init	libp2p/crypto/secp.html#init,SkPrivateKey,openArray[byte]	secp: init(key: var SkPrivateKey; data: openArray[byte]): SkResult[void]	
init	libp2p/crypto/secp.html#init,SkPrivateKey,string	secp: init(key: var SkPrivateKey; data: string): SkResult[void]	
init	libp2p/crypto/secp.html#init,SkPublicKey,openArray[byte]	secp: init(key: var SkPublicKey; data: openArray[byte]): SkResult[void]	
init	libp2p/crypto/secp.html#init,SkPublicKey,string	secp: init(key: var SkPublicKey; data: string): SkResult[void]	
init	libp2p/crypto/secp.html#init,SkSignature,openArray[byte]	secp: init(sig: var SkSignature; data: openArray[byte]): SkResult[void]	
init	libp2p/crypto/secp.html#init,SkSignature,string	secp: init(sig: var SkSignature; data: string): SkResult[void]	
init	libp2p/crypto/secp.html#init,typedesc[SkPrivateKey],openArray[byte]	secp: init(t: typedesc[SkPrivateKey]; data: openArray[byte]): SkResult[SkPrivateKey]	
init	libp2p/crypto/secp.html#init,typedesc[SkPrivateKey],string	secp: init(t: typedesc[SkPrivateKey]; data: string): SkResult[SkPrivateKey]	
init	libp2p/crypto/secp.html#init,typedesc[SkPublicKey],openArray[byte]	secp: init(t: typedesc[SkPublicKey]; data: openArray[byte]): SkResult[SkPublicKey]	
init	libp2p/crypto/secp.html#init,typedesc[SkPublicKey],string	secp: init(t: typedesc[SkPublicKey]; data: string): SkResult[SkPublicKey]	
init	libp2p/crypto/secp.html#init,typedesc[SkSignature],openArray[byte]	secp: init(t: typedesc[SkSignature]; data: openArray[byte]): SkResult[SkSignature]	
init	libp2p/crypto/secp.html#init,typedesc[SkSignature],string	secp: init(t: typedesc[SkSignature]; data: string): SkResult[SkSignature]	
getPublicKey	libp2p/crypto/secp.html#getPublicKey,SkPrivateKey	secp: getPublicKey(key: SkPrivateKey): SkPublicKey	
toBytes	libp2p/crypto/secp.html#toBytes,SkPrivateKey,openArray[byte]	secp: toBytes(key: SkPrivateKey; data: var openArray[byte]): SkResult[int]	
toBytes	libp2p/crypto/secp.html#toBytes,SkPublicKey,openArray[byte]	secp: toBytes(key: SkPublicKey; data: var openArray[byte]): SkResult[int]	
toBytes	libp2p/crypto/secp.html#toBytes,SkSignature,openArray[byte]	secp: toBytes(sig: SkSignature; data: var openArray[byte]): int	
getBytes	libp2p/crypto/secp.html#getBytes,SkPrivateKey	secp: getBytes(key: SkPrivateKey): seq[byte]	
getBytes	libp2p/crypto/secp.html#getBytes,SkPublicKey	secp: getBytes(key: SkPublicKey): seq[byte]	
getBytes	libp2p/crypto/secp.html#getBytes,SkSignature	secp: getBytes(sig: SkSignature): seq[byte]	
sign	libp2p/crypto/secp.html#sign,SkPrivateKey,openArray[T]	secp: sign[T: byte | char](key: SkPrivateKey; msg: openArray[T]): SkSignature	
verify	libp2p/crypto/secp.html#verify,SkSignature,openArray[T],SkPublicKey	secp: verify[T: byte | char](sig: SkSignature; msg: openArray[T]; key: SkPublicKey): bool	
clear	libp2p/crypto/secp.html#clear,SkPrivateKey	secp: clear(key: var SkPrivateKey)	
`$`	libp2p/crypto/secp.html#$,SkPrivateKey	secp: `$`(key: SkPrivateKey): string	
`$`	libp2p/crypto/secp.html#$,SkPublicKey	secp: `$`(key: SkPublicKey): string	
`$`	libp2p/crypto/secp.html#$,SkSignature	secp: `$`(key: SkSignature): string	
`$`	libp2p/crypto/secp.html#$,SkKeyPair	secp: `$`(key: SkKeyPair): string	
`==`	libp2p/crypto/secp.html#==,SkPrivateKey,SkPrivateKey	secp: `==`(a, b: SkPrivateKey): bool	
`==`	libp2p/crypto/secp.html#==,SkPublicKey,SkPublicKey	secp: `==`(a, b: SkPublicKey): bool	
`==`	libp2p/crypto/secp.html#==,SkSignature,SkSignature	secp: `==`(a, b: SkSignature): bool	
`==`	libp2p/crypto/secp.html#==,SkKeyPair,SkKeyPair	secp: `==`(a, b: SkKeyPair): bool	
