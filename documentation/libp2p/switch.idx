ConcurrentUpgrades	libp2p/switch.html#ConcurrentUpgrades	switch: ConcurrentUpgrades	
Switch	libp2p/switch.html#Switch	switch: Switch	
addConnEventHandler	libp2p/switch.html#addConnEventHandler,Switch,ConnEventHandler,ConnEventKind	switch: addConnEventHandler(s: Switch; handler: ConnEventHandler; kind: ConnEventKind)	
removeConnEventHandler	libp2p/switch.html#removeConnEventHandler,Switch,ConnEventHandler,ConnEventKind	switch: removeConnEventHandler(s: Switch; handler: ConnEventHandler; kind: ConnEventKind)	
addPeerEventHandler	libp2p/switch.html#addPeerEventHandler,Switch,PeerEventHandler,PeerEventKind	switch: addPeerEventHandler(s: Switch; handler: PeerEventHandler; kind: PeerEventKind)	
removePeerEventHandler	libp2p/switch.html#removePeerEventHandler,Switch,PeerEventHandler,PeerEventKind	switch: removePeerEventHandler(s: Switch; handler: PeerEventHandler; kind: PeerEventKind)	
isConnected	libp2p/switch.html#isConnected,Switch,PeerId	switch: isConnected(s: Switch; peerId: PeerId): bool	
disconnect	libp2p/switch.html#disconnect,Switch,PeerId	switch: disconnect(s: Switch; peerId: PeerId): Future[void]	
connect	libp2p/switch.html#connect.e,Switch,PeerId,seq[MultiAddress]	switch: connect(s: Switch; peerId: PeerId; addrs: seq[MultiAddress]; forceDial = false): Future[\n    void]	
dial	libp2p/switch.html#dial.e,Switch,PeerId,seq[string]	switch: dial(s: Switch; peerId: PeerId; protos: seq[string]): Future[Connection]	
dial	libp2p/switch.html#dial,Switch,PeerId,string	switch: dial(s: Switch; peerId: PeerId; proto: string): Future[Connection]	
dial	libp2p/switch.html#dial.e,Switch,PeerId,seq[MultiAddress],seq[string]	switch: dial(s: Switch; peerId: PeerId; addrs: seq[MultiAddress]; protos: seq[string];\n     forceDial = false): Future[Connection]	
dial	libp2p/switch.html#dial,Switch,PeerId,seq[MultiAddress],string	switch: dial(s: Switch; peerId: PeerId; addrs: seq[MultiAddress]; proto: string): Future[\n    Connection]	
mount	libp2p/switch.html#mount,Switch,T,Matcher	switch: mount[T: LPProtocol](s: Switch; proto: T; matcher: Matcher = nil)	
start	libp2p/switch.html#start,Switch	switch: start(s: Switch): Future[void]	
newSwitch	libp2p/switch.html#newSwitch,PeerInfo,seq[Transport],Identify,Table[string,MuxerProvider],openArray[Secure],ConnManager,MultistreamSelect,NameResolver	switch: newSwitch(peerInfo: PeerInfo; transports: seq[Transport]; identity: Identify;\n          muxers: Table[string, MuxerProvider];\n          secureManagers: openArray[Secure] = []; connManager: ConnManager;\n          ms: MultistreamSelect; nameResolver: NameResolver = nil): Switch	
