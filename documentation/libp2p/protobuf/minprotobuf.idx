MaxMessageSize	libp2p/protobuf/minprotobuf.html#MaxMessageSize	minprotobuf: MaxMessageSize	
Varint	libp2p/protobuf/minprotobuf.html#Varint	ProtoFieldKind.Varint	
Fixed64	libp2p/protobuf/minprotobuf.html#Fixed64	ProtoFieldKind.Fixed64	
Length	libp2p/protobuf/minprotobuf.html#Length	ProtoFieldKind.Length	
StartGroup	libp2p/protobuf/minprotobuf.html#StartGroup	ProtoFieldKind.StartGroup	
EndGroup	libp2p/protobuf/minprotobuf.html#EndGroup	ProtoFieldKind.EndGroup	
Fixed32	libp2p/protobuf/minprotobuf.html#Fixed32	ProtoFieldKind.Fixed32	
ProtoFieldKind	libp2p/protobuf/minprotobuf.html#ProtoFieldKind	minprotobuf: ProtoFieldKind	
WithVarintLength	libp2p/protobuf/minprotobuf.html#WithVarintLength	ProtoFlags.WithVarintLength	
WithUint32BeLength	libp2p/protobuf/minprotobuf.html#WithUint32BeLength	ProtoFlags.WithUint32BeLength	
WithUint32LeLength	libp2p/protobuf/minprotobuf.html#WithUint32LeLength	ProtoFlags.WithUint32LeLength	
ProtoFlags	libp2p/protobuf/minprotobuf.html#ProtoFlags	minprotobuf: ProtoFlags	
ProtoBuffer	libp2p/protobuf/minprotobuf.html#ProtoBuffer	minprotobuf: ProtoBuffer	
ProtoHeader	libp2p/protobuf/minprotobuf.html#ProtoHeader	minprotobuf: ProtoHeader	
ProtoField	libp2p/protobuf/minprotobuf.html#ProtoField	minprotobuf: ProtoField	
ProtoError	libp2p/protobuf/minprotobuf.html#ProtoError	minprotobuf: ProtoError	
ProtoResult	libp2p/protobuf/minprotobuf.html#ProtoResult	minprotobuf: ProtoResult	
ProtoScalar	libp2p/protobuf/minprotobuf.html#ProtoScalar	minprotobuf: ProtoScalar	
SupportedWireTypes	libp2p/protobuf/minprotobuf.html#SupportedWireTypes	minprotobuf: SupportedWireTypes	
checkFieldNumber	libp2p/protobuf/minprotobuf.html#checkFieldNumber.t,int	minprotobuf: checkFieldNumber(i: int)	
getProtoHeader	libp2p/protobuf/minprotobuf.html#getProtoHeader.t,int,ProtoFieldKind	minprotobuf: getProtoHeader(index: int; wire: ProtoFieldKind): uint64	
getProtoHeader	libp2p/protobuf/minprotobuf.html#getProtoHeader.t,ProtoField	minprotobuf: getProtoHeader(field: ProtoField): uint64	
toOpenArray	libp2p/protobuf/minprotobuf.html#toOpenArray.t,ProtoBuffer	minprotobuf: toOpenArray(pb: ProtoBuffer): untyped	
isEmpty	libp2p/protobuf/minprotobuf.html#isEmpty.t,ProtoBuffer	minprotobuf: isEmpty(pb: ProtoBuffer): bool	
isEnough	libp2p/protobuf/minprotobuf.html#isEnough.t,ProtoBuffer,int	minprotobuf: isEnough(pb: ProtoBuffer; length: int): bool	
getPtr	libp2p/protobuf/minprotobuf.html#getPtr.t,ProtoBuffer	minprotobuf: getPtr(pb: ProtoBuffer): pointer	
getLen	libp2p/protobuf/minprotobuf.html#getLen.t,ProtoBuffer	minprotobuf: getLen(pb: ProtoBuffer): int	
vsizeof	libp2p/protobuf/minprotobuf.html#vsizeof,ProtoField	minprotobuf: vsizeof(field: ProtoField): int	
initProtoBuffer	libp2p/protobuf/minprotobuf.html#initProtoBuffer,seq[byte],int,set[ProtoFlags]	minprotobuf: initProtoBuffer(data: seq[byte]; offset = 0; options: set[ProtoFlags] = {}): ProtoBuffer	
initProtoBuffer	libp2p/protobuf/minprotobuf.html#initProtoBuffer,openArray[byte],int,set[ProtoFlags]	minprotobuf: initProtoBuffer(data: openArray[byte]; offset = 0; options: set[ProtoFlags] = {}): ProtoBuffer	
initProtoBuffer	libp2p/protobuf/minprotobuf.html#initProtoBuffer,set[ProtoFlags]	minprotobuf: initProtoBuffer(options: set[ProtoFlags] = {}): ProtoBuffer	
write	libp2p/protobuf/minprotobuf.html#write,ProtoBuffer,int,T	minprotobuf: write[T: ProtoScalar](pb: var ProtoBuffer; field: int; value: T)	
writePacked	libp2p/protobuf/minprotobuf.html#writePacked,ProtoBuffer,int,openArray[T]	minprotobuf: writePacked[T: ProtoScalar](pb: var ProtoBuffer; field: int; value: openArray[T])	
write	libp2p/protobuf/minprotobuf.html#write,ProtoBuffer,int,openArray[T]	minprotobuf: write[T: byte | char](pb: var ProtoBuffer; field: int; value: openArray[T])	
write	libp2p/protobuf/minprotobuf.html#write,ProtoBuffer,int,ProtoBuffer	minprotobuf: write(pb: var ProtoBuffer; field: int; value: ProtoBuffer)	
finish	libp2p/protobuf/minprotobuf.html#finish,ProtoBuffer	minprotobuf: finish(pb: var ProtoBuffer)	
getField	libp2p/protobuf/minprotobuf.html#getField,ProtoBuffer,int,T	minprotobuf: getField[T: ProtoScalar](data: ProtoBuffer; field: int; output: var T): ProtoResult[\n    bool]	
getField	libp2p/protobuf/minprotobuf.html#getField,ProtoBuffer,int,openArray[T],int	minprotobuf: getField[T: byte | char](data: ProtoBuffer; field: int;\n                         output: var openArray[T]; outlen: var int): ProtoResult[\n    bool]	
getField	libp2p/protobuf/minprotobuf.html#getField,ProtoBuffer,int,T_2	minprotobuf: getField[T: seq[byte] | string](data: ProtoBuffer; field: int; output: var T): ProtoResult[\n    bool]	
getField	libp2p/protobuf/minprotobuf.html#getField,ProtoBuffer,int,ProtoBuffer	minprotobuf: getField(pb: ProtoBuffer; field: int; output: var ProtoBuffer): ProtoResult[bool]	
getRequiredField	libp2p/protobuf/minprotobuf.html#getRequiredField,ProtoBuffer,int,T	minprotobuf: getRequiredField[T](pb: ProtoBuffer; field: int; output: var T): ProtoResult[\n    void]	
getRepeatedField	libp2p/protobuf/minprotobuf.html#getRepeatedField,ProtoBuffer,int,seq[T]	minprotobuf: getRepeatedField[T: seq[byte] | string](data: ProtoBuffer; field: int;\n                                        output: var seq[T]): ProtoResult[bool]	
getRepeatedField	libp2p/protobuf/minprotobuf.html#getRepeatedField,ProtoBuffer,int,seq[T]_2	minprotobuf: getRepeatedField[T: ProtoScalar](data: ProtoBuffer; field: int;\n                                 output: var seq[T]): ProtoResult[bool]	
getRequiredRepeatedField	libp2p/protobuf/minprotobuf.html#getRequiredRepeatedField,ProtoBuffer,int,seq[T]	minprotobuf: getRequiredRepeatedField[T](pb: ProtoBuffer; field: int; output: var seq[T]): ProtoResult[\n    void]	
getPackedRepeatedField	libp2p/protobuf/minprotobuf.html#getPackedRepeatedField,ProtoBuffer,int,seq[T]	minprotobuf: getPackedRepeatedField[T: ProtoScalar](data: ProtoBuffer; field: int;\n                                       output: var seq[T]): ProtoResult[bool]	
