LPStreamTrackerName	libp2p/stream/lpstream.html#LPStreamTrackerName	lpstream: LPStreamTrackerName	
Eof	libp2p/stream/lpstream.html#Eof	lpstream: Eof	
Direction	libp2p/stream/lpstream.html#Direction	lpstream: Direction	
LPStream	libp2p/stream/lpstream.html#LPStream	lpstream: LPStream	
LPStreamError	libp2p/stream/lpstream.html#LPStreamError	lpstream: LPStreamError	
LPStreamIncompleteError	libp2p/stream/lpstream.html#LPStreamIncompleteError	lpstream: LPStreamIncompleteError	
LPStreamIncorrectDefect	libp2p/stream/lpstream.html#LPStreamIncorrectDefect	lpstream: LPStreamIncorrectDefect	
LPStreamLimitError	libp2p/stream/lpstream.html#LPStreamLimitError	lpstream: LPStreamLimitError	
LPStreamReadError	libp2p/stream/lpstream.html#LPStreamReadError	lpstream: LPStreamReadError	
LPStreamWriteError	libp2p/stream/lpstream.html#LPStreamWriteError	lpstream: LPStreamWriteError	
LPStreamEOFError	libp2p/stream/lpstream.html#LPStreamEOFError	lpstream: LPStreamEOFError	
LPStreamClosedError	libp2p/stream/lpstream.html#LPStreamClosedError	lpstream: LPStreamClosedError	
InvalidVarintError	libp2p/stream/lpstream.html#InvalidVarintError	lpstream: InvalidVarintError	
MaxSizeError	libp2p/stream/lpstream.html#MaxSizeError	lpstream: MaxSizeError	
StreamTracker	libp2p/stream/lpstream.html#StreamTracker	lpstream: StreamTracker	
newLPStreamReadError	libp2p/stream/lpstream.html#newLPStreamReadError,ref.CatchableError	lpstream: newLPStreamReadError(p: ref CatchableError): ref LPStreamReadError	
newLPStreamReadError	libp2p/stream/lpstream.html#newLPStreamReadError,string	lpstream: newLPStreamReadError(msg: string): ref LPStreamReadError	
newLPStreamWriteError	libp2p/stream/lpstream.html#newLPStreamWriteError,ref.CatchableError	lpstream: newLPStreamWriteError(p: ref CatchableError): ref LPStreamWriteError	
newLPStreamIncompleteError	libp2p/stream/lpstream.html#newLPStreamIncompleteError	lpstream: newLPStreamIncompleteError(): ref LPStreamIncompleteError	
newLPStreamLimitError	libp2p/stream/lpstream.html#newLPStreamLimitError	lpstream: newLPStreamLimitError(): ref LPStreamLimitError	
newLPStreamIncorrectDefect	libp2p/stream/lpstream.html#newLPStreamIncorrectDefect,string	lpstream: newLPStreamIncorrectDefect(m: string): ref LPStreamIncorrectDefect	
newLPStreamEOFError	libp2p/stream/lpstream.html#newLPStreamEOFError	lpstream: newLPStreamEOFError(): ref LPStreamEOFError	
newLPStreamClosedError	libp2p/stream/lpstream.html#newLPStreamClosedError	lpstream: newLPStreamClosedError(): ref LPStreamClosedError	
shortLog	libp2p/stream/lpstream.html#shortLog,LPStream	lpstream: shortLog(s: LPStream): auto	
formatItIMPL	libp2p/stream/lpstream.html#formatItIMPL.t,LPStream	lpstream: formatItIMPL(it: LPStream): auto	
initStream	libp2p/stream/lpstream.html#initStream.e,LPStream	lpstream: initStream(s: LPStream)	
join	libp2p/stream/lpstream.html#join,LPStream	lpstream: join(s: LPStream): Future[void]	
closed	libp2p/stream/lpstream.html#closed.e,LPStream	lpstream: closed(s: LPStream): bool	
atEof	libp2p/stream/lpstream.html#atEof.e,LPStream	lpstream: atEof(s: LPStream): bool	
readOnce	libp2p/stream/lpstream.html#readOnce.e,LPStream,pointer,int	lpstream: readOnce(s: LPStream; pbytes: pointer; nbytes: int): Future[int]	
readExactly	libp2p/stream/lpstream.html#readExactly,LPStream,pointer,int	lpstream: readExactly(s: LPStream; pbytes: pointer; nbytes: int): Future[void]	
readLine	libp2p/stream/lpstream.html#readLine,LPStream,int,string	lpstream: readLine(s: LPStream; limit = 0; sep = &quot;\r\n&quot;): Future[string]	
readVarint	libp2p/stream/lpstream.html#readVarint,LPStream	lpstream: readVarint(conn: LPStream): Future[uint64]	
readLp	libp2p/stream/lpstream.html#readLp,LPStream,int	lpstream: readLp(s: LPStream; maxSize: int): Future[seq[byte]]	
write	libp2p/stream/lpstream.html#write.e,LPStream,seq[byte]	lpstream: write(s: LPStream; msg: seq[byte]): Future[void]	
writeLp	libp2p/stream/lpstream.html#writeLp,LPStream,openArray[byte]	lpstream: writeLp(s: LPStream; msg: openArray[byte]): Future[void]	
writeLp	libp2p/stream/lpstream.html#writeLp,LPStream,string	lpstream: writeLp(s: LPStream; msg: string): Future[void]	
write	libp2p/stream/lpstream.html#write,LPStream,string	lpstream: write(s: LPStream; msg: string): Future[void]	
closeImpl	libp2p/stream/lpstream.html#closeImpl.e,LPStream	lpstream: closeImpl(s: LPStream): Future[void]	
close	libp2p/stream/lpstream.html#close.e,LPStream	lpstream: close(s: LPStream): Future[void]	
closeWithEOF	libp2p/stream/lpstream.html#closeWithEOF,LPStream	lpstream: closeWithEOF(s: LPStream): Future[void]	
